Delivered-To: fweist@interactions.com
Received: by 10.223.165.66 with SMTP id j2csp9613wrb;
        Tue, 25 Jul 2017 14:43:00 -0700 (PDT)
X-Received: by 10.37.85.194 with SMTP id j185mr16615623ybb.301.1501018980363;
        Tue, 25 Jul 2017 14:43:00 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1501018980; cv=none;
        d=google.com; s=arc-20160816;
        b=fCzx6QHIS1YfHd6pgg2iMjg5Sr3vxEt4hik2/+5621MWMznl0bk14RhKVSFqtFcSuy
         qMt3+vV/gNU8zbCbjz8muEKDiTMdSMnpF9JrZvpJ6YZwAiQfVqySURSNd7+I7aS5Cd4r
         I7uAVuNkZRymqmQ4MX4VN0TAdzzs9VfSyMLC8CPHBoMeSChsBvQyGVQXCuBx21xzvkHt
         4P+mlW9mDlDRymGphhI6cVEpoA3cNtzjEV7x4U6hKlfr45CKZn7+mn2ZylhoPjEBTsrk
         prKBaoOgT9TbeQC10ZhizfJ9DDNNNe7tsPunPuYfhFBawvh4RMNPuk5aVUGRxeHHHe8S
         aeng==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:references:in-reply-to:mime-version
         :dkim-signature:arc-authentication-results;
        bh=oIJMDAtVzHnoDTWubC3gZ7g9TTBYP6me9nYO0Dwd72c=;
        b=fbbtqR92JSSENT813x+cEcTc2j3wNyUFT3s82f/d307D/qFjB+p5XVq8XN2Xdd18Ql
         VTALINt1l/g1OV/YRm8Pzrk3BH3TUajM1Bd3nKIaeo5tvhcAPB6OfvZkSdLUi6wCX3wd
         +vCEnBsbXu+l1/AtyP0aicP5NPN31a5x2eqMEiWLd7+cS661G6fQd5I0DSyhuS1kOXTo
         go91doiAMa9bP1eU+JaFTu/URrYJDkoGheDvd33SV0u24Coi9Zl1IoPIWCU7p5MC3pw3
         Fq25qmN4BQaVIww3oIJe9geNsPA+4siLIFF0Moi5kJzflU18pVQp6FlnVnJlubq3Oc26
         53eA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@interactions.com header.b=BUjTtiYf;
       spf=pass (google.com: domain of iarizmendi@interactions.com designates 2607:f8b0:4002:c05::22c as permitted sender) smtp.mailfrom=iarizmendi@interactions.com
Return-Path: <iarizmendi@interactions.com>
Received: from mail-yw0-x22c.google.com (mail-yw0-x22c.google.com. [2607:f8b0:4002:c05::22c])
        by mx.google.com with ESMTPS id j14si3264941ywa.52.2017.07.25.14.43.00
        for <fweist@interactions.com>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Tue, 25 Jul 2017 14:43:00 -0700 (PDT)
Received-SPF: pass (google.com: domain of iarizmendi@interactions.com designates 2607:f8b0:4002:c05::22c as permitted sender) client-ip=2607:f8b0:4002:c05::22c;
Authentication-Results: mx.google.com;
       dkim=pass header.i=@interactions.com header.b=BUjTtiYf;
       spf=pass (google.com: domain of iarizmendi@interactions.com designates 2607:f8b0:4002:c05::22c as permitted sender) smtp.mailfrom=iarizmendi@interactions.com
Received: by mail-yw0-x22c.google.com with SMTP id x125so76631647ywa.0
        for <fweist@interactions.com>; Tue, 25 Jul 2017 14:43:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=interactions.com; s=google;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to;
        bh=oIJMDAtVzHnoDTWubC3gZ7g9TTBYP6me9nYO0Dwd72c=;
        b=BUjTtiYf75Ad94uesfvm7AfZljVJ/u7q03RR38f1MYkoa3wQVoSxZpKf1aEK1QVtvk
         q6zhCZ2imlMtTXiOsCgDlhxHOAkxnGbi/D/ZYmRpH+ZTxb/ByrprRpnJ9+d4Pdc6Fvig
         K6tGsRmZRvJWYUKTMKmQ7IUOJGcx71lrh1tFOczuEkPNJsVal/vCa/Dqwd6ArO/mkMPE
         F+pDxutjRVPmJ/7R/s+4orecJd3E5/W7843kDP+P5j8EFqu4t5G59G5nPNtjCtNrqZ+Y
         8wOmv19Ge6if3HvG1Km//LJGHfrahoXphD+iT83p8r0gs+QDpWsTd9r9WPbRKfGU6J2w
         Gjqw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:in-reply-to:references:from:date
         :message-id:subject:to;
        bh=oIJMDAtVzHnoDTWubC3gZ7g9TTBYP6me9nYO0Dwd72c=;
        b=lFFvzOZ7SxRGSyFMH95nPJfoKYhEf8GWRdmgl568WugF8yYI/AZ/oFVjCH+HM+2zHo
         T5hUFyO4FmBDEIXDZcRRrfQ18rIbPpSk1YnhlBS/TUAR9YRJ/mr5jKeJZdLNrFd8cQrR
         mCEMQH1tE/0J5qISCeXTRt+OThiiWzXn/EPcnNs4RsE8nPnBWs60f/BSFb1PJjvBZWMN
         iRVFJWfNUcphuKbQXPCiVXJXfDrkYFqi82C3aSztZfZoJ2QuHZbBLugCXgGGElkmPKwO
         jwB1RB8KmzdleOr0YcXT3Kd8jWClrpxBKdyC/KzBdZLn3zoh01mJDm4uKahOr5rlXIi7
         01ww==
X-Gm-Message-State: AIVw112B8nVN4n9UFDiW2hlgMbtZNHucNbbAogJZzt9rmuZ3RElEPT5n
	uFF5XlswLRX7SX84dhhoBnF7S3dzMVbqUmQW1g==
X-Received: by 10.37.90.84 with SMTP id o81mr18626138ybb.350.1501018979725;
 Tue, 25 Jul 2017 14:42:59 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.37.207.135 with HTTP; Tue, 25 Jul 2017 14:42:19 -0700 (PDT)
In-Reply-To: <CAGCPLUg=s7mpQcDRjgExS6nCkXi8kDYQ4qpY-FnjyJyE9jw71Q@mail.gmail.com>
References: <CAGCPLUg=s7mpQcDRjgExS6nCkXi8kDYQ4qpY-FnjyJyE9jw71Q@mail.gmail.com>
From: Iker Arizmendi <iarizmendi@interactions.com>
Date: Tue, 25 Jul 2017 17:42:19 -0400
Message-ID: <CAFGK3LgJ5sjrTdBW5reyspwFXK88SpewY8Kb6BiMs-xY7P3zWA@mail.gmail.com>
Subject: Re: Regarding named variables.
To: Fraser Weist <fweist@interactions.com>
Content-Type: multipart/alternative; boundary="001a11426fce17029605552b375c"

--001a11426fce17029605552b375c
Content-Type: text/plain; charset="UTF-8"

Here are some half-baked thoughts...

   - Extend the *CxxPyArgs* to accept two arguments instead of one.
Ie, *CxxPyArgs(PyObject*
   args, PyObject* kwargs). *These can be stored under m_args, m_kwargs,
   respectively (the current m_obj variable was poorly named).
   - Update *CxxPyTypeMeth::func_call* to construct the args object using
   the new signature above.
   - Add separate methods to *CxxPyArgs* to support getting at the keyword
   args in *m_kwargs*. Eg, *getLong(const char* kw)*, *kwSize(),* and so
   on. The existing methods are left undisturbed to avoid breaking existing
   code.

This should be enough to give our modules access to the keyword args and
kick things off. After that perhaps we can work out a way for modules to
declare up front which methods/function take kwargs and/or the list of
allowed keywords (eg, during the call to *addmeth* and *addfunc*).

Iker



On Tue, Jul 25, 2017 at 4:06 PM, Fraser Weist <fweist@interactions.com>
wrote:

> Hey Iker,
>
> I've been working on transitioning fsmlibmodule.c to use cxxpy, and the
> named arguments issue is giving me a bit of trouble.
>
> As of right now, CxxPy depends heavily on the CxxPyArgs class, which does
> not support named arguments. This is because, when we access one value in a
> Python argument tuple, we must do so by index, using the Python.h function
> PyTuple_GetItem. There is no similar function in the Python.h API which
> allows us to access a tuple value by name.
>
> How do you think we should approach this change? We could create a
> name-to-index map when we initialize the CxxPyArgs object - then, when we
> want to fetch an argument by name, we just look up the corresponding index
> in the map, and access the tuple as we normally would. Not sure if this is
> too on the nose. I'm also not sure what the opportune moment would be to
> create this map.
>
> Perhaps the only option is making use of the PyArg_ParseTupleAndKeywords
> function in the body of our functions in the FSM module. After all, we
> can't call this function until we know exactly how many arguments we have
> and all of their types.
>
> Fraser
>

--001a11426fce17029605552b375c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_default" style=3D"font-size:large">Her=
e are some half-baked thoughts...</div><div class=3D"gmail_default"><div cl=
ass=3D"gmail_default"><ul><li><font size=3D"4">Extend the </font><b><font f=
ace=3D"monospace, monospace">CxxPyArgs</font></b><font size=3D"4"> to accep=
t two arguments instead of one. Ie, </font><b style=3D"font-family:monospac=
e,monospace">CxxPyArgs(PyObject* args, PyObject* kwargs). </b><font face=3D=
"arial, helvetica, sans-serif" size=3D"4">These can be stored under m_args,=
 m_kwargs, respectively (the current m_obj variable was poorly named).</fon=
t></li><li><font size=3D"4" style=3D"font-family:arial,helvetica,sans-serif=
">Update=C2=A0</font><b><font face=3D"monospace, monospace">CxxPyTypeMeth::=
func_call</font></b><font size=3D"4" style=3D"font-family:arial,helvetica,s=
ans-serif"> to construct the args object using the new signature above.</fo=
nt></li><li><font><font size=3D"4" style=3D"font-family:arial,helvetica,san=
s-serif">Add separate methods to </font><b><font face=3D"monospace, monospa=
ce">CxxPyArgs</font></b><font><font size=3D"4" style=3D"font-family:arial,h=
elvetica,sans-serif"> to support getting at the keyword args in </font><b><=
font face=3D"monospace, monospace">m_kwargs</font></b><font size=3D"4" styl=
e=3D"font-family:arial,helvetica,sans-serif">. Eg, </font></font></font><b>=
<font face=3D"monospace, monospace">getLong(const char* kw)</font></b><font=
><font size=3D"4" style=3D"font-family:arial,helvetica,sans-serif">, </font=
><b><font face=3D"monospace, monospace">kwSize(),</font></b><font size=3D"4=
" style=3D"font-family:arial,helvetica,sans-serif">=C2=A0and so on. The exi=
sting methods are left undisturbed to avoid breaking existing code.</font><=
/font></li></ul><div><font size=3D"4" style=3D"font-family:arial,helvetica,=
sans-serif">This should be enough to give our modules access to the keyword=
 args and kick things off. After that perhaps we can work out a way for mod=
ules to declare up front which methods/function take kwargs and/or the list=
 of allowed keywords (eg, during the call to </font><b><font face=3D"monosp=
ace, monospace">addmeth</font></b><font><font size=3D"4" style=3D"font-fami=
ly:arial,helvetica,sans-serif">=C2=A0and=C2=A0</font><b><font face=3D"monos=
pace, monospace">addfunc</font></b><font size=3D"4" style=3D"font-family:ar=
ial,helvetica,sans-serif">).</font></font></div><div><font face=3D"arial, h=
elvetica, sans-serif" size=3D"4"><br></font></div><div><span style=3D"font-=
family:arial,helvetica,sans-serif;font-size:large">Iker</span><br></div><di=
v><font face=3D"arial, helvetica, sans-serif" size=3D"4"><br></font></div><=
div><br></div></div></div></div><div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On Tue, Jul 25, 2017 at 4:06 PM, Fraser Weist <span dir=3D=
"ltr">&lt;<a href=3D"mailto:fweist@interactions.com" target=3D"_blank">fwei=
st@interactions.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quo=
te" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"=
><div dir=3D"ltr"><div>Hey Iker,</div><div><br></div>I&#39;ve been working =
on transitioning fsmlibmodule.c to use cxxpy, and the named arguments issue=
 is giving me a bit of trouble.<div><br></div><div>As of right now, CxxPy d=
epends heavily on the CxxPyArgs class, which does not support named argumen=
ts. This is because, when we access one value in a Python argument tuple, w=
e must do so by index, using the Python.h function PyTuple_GetItem. There i=
s no similar function in the Python.h API which allows us to access a tuple=
 value by name.</div><div><br></div><div>How do you think we should approac=
h this change? We could create a name-to-index map when we initialize the C=
xxPyArgs object - then, when we want to fetch an argument by name, we just =
look up the corresponding index in the map, and access the tuple as we norm=
ally would. Not sure if this is too on the nose. I&#39;m also not sure what=
 the opportune moment would be to create this map.<br></div><div><br></div>=
<div>Perhaps the only option is making use of the=C2=A0PyArg_<wbr>ParseTupl=
eAndKeywords function in the body of our functions in the FSM module. After=
 all, we can&#39;t call this function until we know exactly how many argume=
nts we have and all of their types.</div><span class=3D"HOEnZb"><font color=
=3D"#888888"><div><br></div><div>Fraser</div></font></span></div>
</blockquote></div><br></div>

--001a11426fce17029605552b375c--
